generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DayOfWeek {
  MONDAY
  SUNDAY
  TUESDAY
  WEDNESDAY
  THUSDAY
  FRIDAY
  SATURDAY
}

model Time {
  id         Int       @id @default(autoincrement())
  day        DayOfWeek
  startTime  String
  endTime    String
  Schedules  Schedule  @relation(fields: [scheduleId], references: [id])
  scheduleId Int
}

model Schedule {
  id        Int         @id @default(autoincrement())
  schedule  Time[]
  Teacher   Teacher[]
  Classroom Classroom[]
}

model Teacher {
  id         Int       @id @default(autoincrement())
  name       String
  schedule   Schedule  @relation(fields: [scheduleId], references: [id])
  scheduleId Int
  Project    Project   @relation(fields: [projectId], references: [id])
  projectId  Int
  Subject    Subject[]
}

model Subject {
  id                     Int                  @id @default(autoincrement())
  name                   String
  classes                Int                  @default(1)
  configuration          SubjectConfiguration @relation(fields: [subjectConfigurationId], references: [id])
  subjectConfigurationId Int
  teacher                Teacher              @relation(fields: [teacherId], references: [id])
  teacherId              Int
  Classroom              Classroom            @relation(fields: [classroomId], references: [id])
  classroomId            Int
}

model Classroom {
  id         Int       @id @default(autoincrement())
  name       String
  schedule   Schedule  @relation(fields: [scheduleId], references: [id])
  scheduleId Int
  Project    Project   @relation(fields: [projectId], references: [id])
  projectId  Int
  subjects   Subject[]
}

model Project {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  classrooms      Classroom[]
  teachers        Teacher[]
  configuration   Configuration @relation(fields: [configurationId], references: [id])
  configurationId Int

  @@index([name])
}

model Configuration {
  id                     Int                  @id @default(autoincrement())
  Project                Project[]
  preferFirstClasses     Boolean              @default(true)
  geneticConfiguration   GeneticConfiguration @relation(fields: [geneticConfigurationId], references: [id])
  geneticConfigurationId Int
}

enum SelectionMethod {
  RANK
  ROULETTE
  COMPETITION
}

enum StopMethod {
  MAX_GENERATIONS
  GENERATIONS_WITHOUT_BETTER_SCORE
}

model GeneticConfiguration {
  id                   Int             @id @default(autoincrement())
  Configuration        Configuration[]
  populationSize       Int             @default(100)
  rankSlice            Int             @default(3)
  randomIndividualSize Int             @default(1)
  mutationRate         Decimal         @default(0.1)
  selectionMethod      SelectionMethod @default(COMPETITION)
  stopMethod           StopMethod      @default(GENERATIONS_WITHOUT_BETTER_SCORE)
}

model SubjectConfiguration {
  id                          Int       @id @default(autoincrement())
  minConsecutiveClasses       Int       @default(2)
  maxConsecutiveClasses       Int       @default(4)
  preferMaxConsecutiveClasses Boolean   @default(false)
  Subject                     Subject[]
}
